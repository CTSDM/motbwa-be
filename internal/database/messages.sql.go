// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages(id, sender_id, receiver_id, sent_at, content)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4)
RETURNING id, sender_id, receiver_id, sent_at, content
`

type CreateMessageParams struct {
	SenderID   uuid.UUID
	ReceiverID uuid.UUID
	SentAt     time.Time
	Content    []byte
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.SenderID,
		arg.ReceiverID,
		arg.SentAt,
		arg.Content,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.ReceiverID,
		&i.SentAt,
		&i.Content,
	)
	return i, err
}

const deleteMessages = `-- name: DeleteMessages :exec
DELETE FROM messages
`

func (q *Queries) DeleteMessages(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteMessages)
	return err
}

const getMessagesByReceiver = `-- name: GetMessagesByReceiver :many
SELECT id, sender_id, receiver_id, sent_at, content FROM messages
WHERE receiver_id = $1
`

func (q *Queries) GetMessagesByReceiver(ctx context.Context, receiverID uuid.UUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByReceiver, receiverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.ReceiverID,
			&i.SentAt,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesBySender = `-- name: GetMessagesBySender :many
SELECT id, sender_id, receiver_id, sent_at, content FROM messages
WHERE sender_id = $1
`

func (q *Queries) GetMessagesBySender(ctx context.Context, senderID uuid.UUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesBySender, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.ReceiverID,
			&i.SentAt,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
